#!/usr/bin/env bash
set -euo pipefail

# ClaudeOps Main Command
# Unified interface for all ClaudeOps operations

VERSION="1.0.0"
LOG_BASE="${LOG_BASE:-/var/log/claudeops}"
CONFIG_FILE="${CONFIG_FILE:-/etc/claudeops/config.json}"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

show_help() {
    cat << EOF
ClaudeOps v${VERSION} - Autonomous Server Management

Usage: claudeops <command> [options]

Commands:
  setup         Run the interactive setup wizard
  check         Run a manual health check now
  boot          Run boot recovery manually
  status        Show current system status
  logs          View recent health check logs
  issues        View unresolved issues
  actions       View recent actions taken
  config        View or edit configuration
  version       Show version information
  help          Show this help message

Examples:
  claudeops setup          # Initial setup wizard
  claudeops check          # Run health check immediately
  claudeops logs           # View last 3 health checks
  claudeops issues         # Show open issues
  claudeops status         # Quick system status overview

Log locations:
  Health checks: $LOG_BASE/health/
  Issues:        $LOG_BASE/issues/
  Actions:       $LOG_BASE/actions/
  Boot logs:     $LOG_BASE/boot/

Configuration:
  Config file:   $CONFIG_FILE
  Example:       $CONFIG_FILE.example

For more information, visit: https://github.com/USERNAME/claudeops
EOF
}

show_version() {
    echo "ClaudeOps v${VERSION}"
    echo ""
    if command -v claude &> /dev/null; then
        echo "Claude Code CLI: $(claude --version 2>&1 || echo 'installed')"
    else
        echo "Claude Code CLI: Not installed"
    fi
}

show_status() {
    echo -e "${BLUE}ClaudeOps System Status${NC}"
    echo ""

    # Check if config exists
    if [ -f "$CONFIG_FILE" ]; then
        echo -e "Configuration: ${GREEN}✓ Found${NC} ($CONFIG_FILE)"
    else
        echo -e "Configuration: ${RED}✗ Not found${NC} (run 'claudeops setup')"
        return
    fi

    # Check last health check
    local last_health=$(ls -t "$LOG_BASE/health/"*.md 2>/dev/null | head -n 1)
    if [ -n "$last_health" ]; then
        local timestamp=$(basename "$last_health" .md)
        local status="UNKNOWN"
        if grep -q "Status:.*HEALTHY" "$last_health"; then
            status="${GREEN}HEALTHY${NC}"
        elif grep -q "Status:.*WARNING" "$last_health"; then
            status="${YELLOW}WARNING${NC}"
        elif grep -q "Status:.*CRITICAL" "$last_health"; then
            status="${RED}CRITICAL${NC}"
        fi
        echo -e "Last health check: $timestamp"
        echo -e "Status: $status"
    else
        echo -e "Last health check: ${YELLOW}Never${NC}"
    fi

    # Count open issues
    local issue_count=0
    if [ -d "$LOG_BASE/issues" ]; then
        for issue in $(ls "$LOG_BASE/issues/"*.md 2>/dev/null); do
            if ! grep -q "Status:.*RESOLVED" "$issue"; then
                issue_count=$((issue_count + 1))
            fi
        done
    fi

    if [ "$issue_count" -eq 0 ]; then
        echo -e "Open issues: ${GREEN}0${NC}"
    else
        echo -e "Open issues: ${YELLOW}$issue_count${NC} (run 'claudeops issues' to view)"
    fi

    # Check cron job
    if [ -f "/etc/cron.d/claudeops" ]; then
        echo -e "Cron job: ${GREEN}✓ Installed${NC}"
    else
        echo -e "Cron job: ${YELLOW}Not installed${NC}"
    fi

    # Check boot recovery
    if [ -f "/etc/systemd/system/claudeops-boot.service" ]; then
        if systemctl is-enabled claudeops-boot.service &>/dev/null; then
            echo -e "Boot recovery: ${GREEN}✓ Enabled${NC}"
        else
            echo -e "Boot recovery: ${YELLOW}Installed but not enabled${NC}"
        fi
    else
        echo -e "Boot recovery: ${YELLOW}Not installed${NC}"
    fi
}

show_logs() {
    local count="${1:-3}"
    echo -e "${BLUE}Recent Health Checks (last $count)${NC}"
    echo ""

    local logs=$(ls -t "$LOG_BASE/health/"*.md 2>/dev/null | head -n "$count")
    if [ -z "$logs" ]; then
        echo "No health check logs found."
        return
    fi

    for log in $logs; do
        local timestamp=$(basename "$log" .md)
        echo -e "${GREEN}═══════════════════════════════════════════${NC}"
        echo -e "${BLUE}$timestamp${NC}"
        echo -e "${GREEN}═══════════════════════════════════════════${NC}"
        cat "$log"
        echo ""
    done
}

show_issues() {
    echo -e "${BLUE}Unresolved Issues${NC}"
    echo ""

    local found=0
    if [ -d "$LOG_BASE/issues" ]; then
        for issue in $(ls -t "$LOG_BASE/issues/"*.md 2>/dev/null); do
            if ! grep -q "Status:.*RESOLVED" "$issue"; then
                found=1
                local filename=$(basename "$issue")
                echo -e "${YELLOW}─────────────────────────────────────────${NC}"
                echo -e "${YELLOW}Issue: $filename${NC}"
                echo -e "${YELLOW}─────────────────────────────────────────${NC}"
                cat "$issue"
                echo ""
            fi
        done
    fi

    if [ "$found" -eq 0 ]; then
        echo -e "${GREEN}No unresolved issues! 🎉${NC}"
    fi
}

show_actions() {
    local count="${1:-5}"
    echo -e "${BLUE}Recent Actions (last $count)${NC}"
    echo ""

    local actions=$(ls -t "$LOG_BASE/actions/"*.md 2>/dev/null | head -n "$count")
    if [ -z "$actions" ]; then
        echo "No actions logged yet."
        return
    fi

    for action in $actions; do
        local filename=$(basename "$action")
        echo -e "${GREEN}─────────────────────────────────────────${NC}"
        echo -e "${GREEN}Action: $filename${NC}"
        echo -e "${GREEN}─────────────────────────────────────────${NC}"
        cat "$action"
        echo ""
    done
}

show_config() {
    if [ ! -f "$CONFIG_FILE" ]; then
        echo -e "${RED}Configuration not found: $CONFIG_FILE${NC}"
        echo "Run 'claudeops setup' to create it."
        return 1
    fi

    echo -e "${BLUE}Configuration: $CONFIG_FILE${NC}"
    echo ""
    cat "$CONFIG_FILE"
}

# Main command router
case "${1:-}" in
    setup)
        exec claudeops-setup
        ;;
    check)
        exec claudeops-cron
        ;;
    boot)
        exec claudeops-boot
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs "${2:-3}"
        ;;
    issues)
        show_issues
        ;;
    actions)
        show_actions "${2:-5}"
        ;;
    config)
        show_config
        ;;
    version)
        show_version
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}Unknown command: ${1:-}${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac